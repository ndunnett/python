import fileinput
from re import sub


ACTION_LINK = "[GitHub Action](/../../actions/workflows/benchmark.yml)"
DH_REPO_LINK = "[ndunnett/python](https://hub.docker.com/r/ndunnett/python)"
PYTHON_LINK = "[Python](https://hub.docker.com/_/python)"
PYPERF_LINK = "[PyPerformance](https://pyperformance.readthedocs.io/)"

OVERVIEW = \
    f"## Benchmark\n" \
    f"This file is automatically generated by a {ACTION_LINK}. " \
    f"The latest image for {DH_REPO_LINK} and the official {PYTHON_LINK} " \
    f"image are pulled and used to run {PYPERF_LINK}, with the results then " \
    f"compared and formatted into this document."


def format_detail(lines):
    """Format details into valid markdown"""
    detail = [f"## {lines[0]}"]
    detail.extend([f"- {line}" for line in lines[1:]])
    return "\n".join(detail)


def format_table(lines):
    """Format table into valid markdown"""
    table = filter(lambda x: not x.startswith("+--"), lines)
    table = [line.replace("=", "-").replace("+", "|") for line in table]
    table = ["## Comparison"] + table
    return "\n".join(table)


def process_results(input):
    """Filter out and format PyPerformance output"""
    # replace "===" bars
    input = sub(r"=+\n\n", "", input)

    # replace filenames with identifiers
    input = input.replace("ndunnett.json", "ndunnett/python")
    input = input.replace("official.json", "Official Python")

    # split out and format sections
    sections = input.split("\n\n")
    detail_1 = format_detail(sections[0].split("\n"))
    detail_2 = format_detail(sections[1].split("\n"))
    table = format_table(sections[2].split("\n"))

    return "\n\n".join([OVERVIEW, detail_1, detail_2, table])


if __name__ == "__main__":
    lines = fileinput.input()
    with open("BENCHMARK.md", mode="w") as file:
        file.write(process_results("".join(lines)))
