---
name: Build All

on:
  workflow_dispatch:
  push:
    paths:
      - build_matrix.json

jobs:
  discover:
    runs-on: ubuntu-latest
    outputs:
      latest_tag: ${{ steps.discover.outputs.latest_tag }}
      build_matrix: ${{ steps.discover.outputs.build_matrix }}
    steps:
      - uses: actions/checkout@v4
      - id: discover
        run: |
          echo "latest_tag=$(jq -r '.["latest_tag"]' variants.json)" | tee -a "$GITHUB_OUTPUT"
          echo "build_matrix=$(jq -r '. | tostring' build_matrix.json)" | tee -a "$GITHUB_OUTPUT"

  build:
    needs: discover
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.discover.outputs.build_matrix) }}
    steps:
      - uses: actions/checkout@v4

      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push image
        shell: bash
        run: |
          set -eux
          docker_repo="ndunnett/python"
          tag_patch="${{ matrix.base_image_tag }}-${{ matrix.python_version }}"
          tag_minor="${{ matrix.base_image_tag }}-$(echo ${{ matrix.python_version }} | cut -d '.' -f 1,2)"

          echo "$tag_patch"

          # docker build . --tag "$docker_repo:$tag_patch" \
          #   --build-arg "PYTHON_VERSION=${{ matrix.python_version }}" \
          #   --build-arg "BASE_IMAGE=${{ matrix.base_image_repo }}" \
          #   --build-arg "BASE_IMAGE_TAG=${{ matrix.base_image_tag }}" \

          # docker push "$docker_repo:$tag_patch"
          # docker manifest create "$docker_repo:$tag_minor" "$docker_repo:$tag_patch"
          # docker manifest push "$docker_repo:$tag_minor"

          # if [ "$tag_minor" = "${{ needs.discover.outputs.latest_tag }}" ]; then
          #   docker manifest create "$docker_repo:latest" "$docker_repo:$tag_patch"
          #   docker manifest push "$docker_repo:latest"
          # fi
